[{"path":"https://dzvoti.github.io/hcesNutR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 hcesNutR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Liberty Mlambo. Author, maintainer. Gareth Osman. Author, contributor. Kevin Tang. Author, contributor. Lucia Segovia de la Revilla. Author, contributor. Louise E. Ander. Author, contributor. Micronutrient Action Policy Support (MAPS) Project. Copyright holder, funder.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mlambo L, Osman G, Tang K, Segovia de la Revilla L, Ander L (2024). hcesNutR: Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis. R package version 1.0.0, https://dzvoti.github.io/hcesNutR/, https://github.com/dzvoti/hcesR2.","code":"@Manual{,   title = {hcesNutR: Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis},   author = {Liberty Mlambo and Gareth Osman and Kevin Tang and Lucia {Segovia de la Revilla} and Louise E. Ander},   year = {2024},   note = {R package version 1.0.0, https://dzvoti.github.io/hcesNutR/},   url = {https://github.com/dzvoti/hcesR2}, }"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"hcesnutr-","dir":"","previous_headings":"","what":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"goal hcesR create package help analysis Household Consumption Expenditure Survey (HCES) data. good source HCES data world bank microdata repository. package contain functions help analysis HCES data. package also contains sample_hces.dta used demonstrate use functions package, can download data installing package running hcesNutR::sample_hces() R console. package still development updated regularly.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"hcesnutr-package","dir":"","previous_headings":"","what":"hcesNutR Package","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"goal hcesNutR project create repository functions data help analysis Household Consumption Expenditure Survey (HCES) data. good source HCES data world bank microdata repository. package contain functions help analysis HCES data. package also contains sample data used book .e. r4hces-data/mwi-ihs5-sample-data use sample data demonstrate use functions package. package still development updated regularly.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"reporting-bugs","dir":"","previous_headings":"","what":"Reporting bugs","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"Please report bugs issues .","code":""},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"can install development version hcesNutR GitHub : discussed previous chapters need load package R session can use . can load package running following code R console.","code":"# install.packages(\"devtools\") devtools::install_github(\"micronutrient/hcesNutR\") library(hcesNutR)"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"functions-in-the-package","dir":"","previous_headings":"","what":"Functions in the package","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"can view functions package running following code R console. can read functions description project website : micronutrient.github.io/hcesNutR/reference/index.html","code":"ls(\"package:hcesNutR\")"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"sample-data","dir":"","previous_headings":"","what":"Sample data","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"data used example randomly generated mimic structure Fifth Integrated Household Survey 2019-2020 HCES Malawi. variables structure data found functions package take dataframe/tibble input data. design allow flexibility input data. example used use stata files .dta functions work .csv files well.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"import-and-explore-the-sample-data","dir":"","previous_headings":"Sample data","what":"Import and explore the sample data","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"Import sample data r4hces-data/mwi-ihs5-sample-data folder. Use read_dta function haven package import .","code":"# Import the data using the haven package from the tidyverse sample_hces <-   haven::read_dta(here::here(\"data\",                               \"mwi-ihs5-sample-data\",                              \"HH_MOD_G1_vMAPS.dta\"))"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"trim-the-data","dir":"","previous_headings":"Sample data","what":"Trim the data","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"example use hcesNutR functions demonstrate processing total consumption data. total consumption data data contains total consumption food item household. consumption columns contain values consumption sources .e. gifted, purchased, ownProduced. workflow processing “” consumption data demonstrated .","code":"# Trim the data to total consumption sample_hces <- sample_hces |>   dplyr::select(case_id:HHID,                 hh_g01:hh_g03c_1)"},{"path":[]},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"column-naming-conventions-and-renaming","dir":"","previous_headings":"hcesnutR Workflow","what":"Column Naming Conventions and Renaming","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"sample_hces data stata format contains data short column name codes associated “question” labels explain contents data. make column names interpretable, package provides rename_hces function, can used rename column codes standard hces names used downstream. rename_hces function uses column names standard_name_mappings_pairs dataset within package. Alternatively, user can create name pairs manually rename columns standard names. important note downstream functions hcesNutR package work standard names work short column names. Therefore, recommended use rename_hces() function ensure column names consistent package’s naming conventions. information use rename_hces function, please refer function’s documentation: rename_hces.","code":"# Rename the variables sample_hces <- hcesNutR::rename_hces(sample_hces,                                      country_name = \"MWI\",                                      survey_name = \"IHS5\")"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"remove-unconsumed-food-items","dir":"","previous_headings":"hcesnutR Workflow","what":"Remove unconsumed food items","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"HCES surveys administer standard questionaire household asked conform whether consumed food items standard list. household consume food item, value ‘consYN’ set constant. remove_unconsumed function removes food items consumed household. function takes data frame name column contains consumption information. function also takes value indicates food item consumed.","code":"# Remove unconsumed food items sample_hces <- hcesNutR::remove_unconsumed(sample_hces,                                            consCol = \"consYN\",                                             consVal = 1)"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"create-two-columns-from-each-dbllbl-column","dir":"","previous_headings":"hcesnutR Workflow","what":"Create two columns from each dbl+lbl column","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"create_dta_labels function creates two columns dbl+lbl (double plus label) column. first column contains numeric values second column contains labels. function takes data frame finds columns contains double plus label column. function returns data frame new columns.","code":"# Split dbl+lbl columns sample_hces <- hcesNutR::create_dta_labels(sample_hces)"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"concatenate-columns","dir":"","previous_headings":"hcesnutR Workflow","what":"Concatenate columns","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"HCES data surveys split consumed food items consumption units multiple columns. concatenate_columns function cleans data combining split columns one column. function can exclude values contatenation specifying whole part values excluded.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"concatenate-food-item-names","dir":"","previous_headings":"hcesnutR Workflow > Concatenate columns","what":"Concatenate food item names","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"","code":"# Merge food item names sample_hces <-   hcesNutR::concatenate_columns(sample_hces,                                 c(\"item_code_name\",                                    \"item_oth\"),                                 \"SPECIFY\",                                 \"item_code_name\")"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"concatenate-food-item-units","dir":"","previous_headings":"hcesnutR Workflow > Concatenate columns","what":"Concatenate food item units","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"Use select rename functions dplyr package subset columns containing food item name , food item code, food unit name food unit code. ensure names meaningful consistent package’s naming conventions.","code":"# Merge consumption unit names. For units it is essential to remove parentesis as they are the major cause of duplicate units sample_hces <-   hcesNutR::concatenate_columns(     sample_hces,     c(       \"cons_unit_name\",       \"cons_unit_oth\",       \"cons_unit_size_name\",       \"hh_g03c_1_name\"     ),     \"SPECIFY\",     \"cons_unit_name\",     TRUE   ) sample_hces <- sample_hces |>   dplyr::select(     case_id,     hhid,     item_code_name,     item_code_code,     cons_unit_name,     cons_unitA,     cons_quant   ) |>   dplyr::rename(food_name = item_code_name,                 food_code = item_code_code,                 cons_unit_code = cons_unitA)"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"match-survey-food-items-to-standard-food-items","dir":"","previous_headings":"hcesnutR Workflow","what":"Match survey food items to standard food items","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"match_food_names function useful standardising survey food names. feasible due internal dataset standard food item names matched corresponding survey food names supported surveys. Alternatively users can use food matching names passing csv function. See hcesNutR::food_list csv structure.","code":"sample_hces <-   match_food_names_v2(     sample_hces,     country = \"MWI\",     survey = \"IHS5\",     food_name_col = \"food_name\",     food_code_col = \"food_code\",     overwrite = FALSE   )"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"match-survey-consumption-units-to-standard-consumption-units","dir":"","previous_headings":"hcesnutR Workflow","what":"Match survey consumption units to standard consumption units","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"match_food_units_v2 function useful standardising survey consumption units. feasible due internal dataset standard consumption units matched corresponding survey consumption units supported surveys. Alternatively users can download template hcesNutR::unit_names_n_codes_df modify use consumption unit matching names.","code":"sample_hces <-   match_food_units_v2(     sample_hces,     country = \"MWI\",     survey = \"IHS5\",     unit_name_col = \"cons_unit_name\",     unit_code_col = \"cons_unit_code\",     matches_csv = NULL,     overwrite = FALSE   )"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"add-regions-and-districts-to-the-data","dir":"","previous_headings":"hcesnutR Workflow","what":"Add regions and districts to the data","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"Identify HCES module contains household identifiers. cases already present HCES data skipped. household identifiers select ones required add data. example add region district identifiers data hh_mod_a_filt.dta file.","code":"# Import household identifiers from the hh_mod_a_filt.dta file household_identifiers <-   haven::read_dta(here::here(\"data\",                              \"mwi-ihs5-sample-data\",                              \"hh_mod_a_filt_vMAPS.dta\")) |>   # subset the identifiers and keep only the ones needed.   dplyr::select(case_id,                 HHID,                 region) |>   dplyr::rename(hhid = HHID)  # Add the identifiers to the data sample_hces <-   dplyr::left_join(sample_hces,                    household_identifiers,                    by = c(\"hhid\", \"case_id\"))"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"create-a-measure_id-column","dir":"","previous_headings":"hcesnutR Workflow","what":"Create a measure_id column","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"create_measure_id function creates measure id column used identify consumption measure food item. function takes data frame name column contains consumption information. function also takes value indicates food item consumed. measure_id unique identifier allows us join consumption data food conversion factors data.","code":"# Create measure id column sample_hces <-   create_measure_id(     sample_hces,     country = \"MWI\",     survey = \"IHS5\",     cols = c(\"region\",              \"matched_cons_unit_code\",              \"matched_food_code\"),     include_ISOs = FALSE   )"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"import-food-conversion-factors","dir":"","previous_headings":"hcesnutR Workflow","what":"Import food conversion factors.","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"available data comes `food_conversion fcators file conversion fcators link food names units corresponding need check conversion factors file contain expected conversion factors hces data processed. check_conv_fct function checks conversion factors file contains expected conversion factors hces data processed. T Remember data randomly generated expected weights realistic. Also food items conversion factors weight food items NA.","code":"# Import food conversion factors file IHS5_conv_fct <-   readr::read_csv(     here::here(       \"data\",       \"mwi-ihs5-sample-data\",       \"IHS5_UNIT_CONVERSION_FACTORS_vMAPS.csv\"     )   ) # Check conversion factors  check_conv_fct(hces_df = sample_hces,                 conv_fct_df = IHS5_conv_fct)"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"calculate-weight-of-food-items-in-kilograms","dir":"","previous_headings":"hcesnutR Workflow","what":"Calculate weight of food items in kilograms.","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"apply_wght_conv_fct function take hces_df conv_fct_df calculate weight food item kilograms. Remember data randomly generated expected weights realistic. Also food items conversion factors weight food items NA.","code":"sample_hces <-   apply_wght_conv_fct(     hces_df = sample_hces,     conv_fct_df = IHS5_conv_fct,     factor_col = \"factor\",     measure_id_col = \"measure_id\",     wt_kg_col = \"wt_kg\",     cons_qnty_col = \"cons_quant\",     allowDuplicates = TRUE   )"},{"path":[]},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"assumptions","dir":"","previous_headings":"","what":"Assumptions","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"ame/afe factors calculated using following assumptions: - Merge HH demographic data AME/AFE factors - Men’s weight: 65kg (assumption) - Women’s weight: 55kg (DHS) - PAL: 1.6X BMR","code":""},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"import-data-required","dir":"","previous_headings":"","what":"Import data required","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"order calculate AFE AME metrics require following data: - Household roster sex age individual HH_MOD_B_vMAPS.dta - Household health HH_MOD_D_vMAPS.dta - AFE AME factors IHS5_AME_FACTORS_vMAPS.csv IHS5_AME_SPEC_vMAPS.csv","code":"# Import data of the roster and health modules of the IHS5 survey ihs5_roster <-   haven::read_dta(here::here(\"data\",                              \"mwi-ihs5-sample-data\",                              \"HH_MOD_B_vMAPS.dta\")) ihs5_health <-   haven::read_dta(here::here(\"data\",                              \"mwi-ihs5-sample-data\",                              \"HH_MOD_D_vMAPS.dta\"))  # Import data of the AME/AFE factors and specifications ame_factors <-   read.csv(here::here(\"data\",                       \"mwi-ihs5-sample-data\",                       \"IHS5_AME_FACTORS_vMAPS.csv\")) |>   janitor::clean_names()  ame_spec_factors <-   read.csv(here::here(\"data\",                       \"mwi-ihs5-sample-data\",                       \"IHS5_AME_SPEC_vMAPS.csv\")) |>   janitor::clean_names() |>   # Rename the population column to cat and select the relevant columns   dplyr::rename(cat = population) |>   dplyr::select(cat, ame_spec, afe_spec)"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"extra-energy-requirements-for-pregnancy","dir":"","previous_headings":"","what":"Extra energy requirements for pregnancy","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"","code":"# Extra energy requirements for pregnancy and Illness pregnantPersons <- ihs5_health |>   dplyr::filter(hh_d05a == 28 |                   hh_d05b == 28) |>    # NOTE: 28 is the code for pregnancy in this survey   dplyr::mutate(ame_preg = 0.11, afe_preg = 0.14) |>    dplyr::select(HHID, ame_preg, afe_preg)"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"process-hh-roster-data","dir":"","previous_headings":"","what":"Process HH roster data","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"","code":"# Process the roster data and rename variables to be more intuitive aMFe_summaries <- ihs5_roster |>   # Rename the variables to be more intuitive   dplyr::rename(sex = hh_b03, age_y = hh_b05a, age_m = hh_b05b) |>   dplyr::mutate(age_m_total = (age_y * 12 + age_m)) |>    # Add the AME/AFE factors to the roster data   dplyr::left_join(ame_factors, by = c(\"age_y\" = \"age\")) |>    dplyr::mutate(     ame_base = dplyr::case_when(sex == 1 ~ ame_m, sex == 2 ~ ame_f),     afe_base = dplyr::case_when(sex == 1 ~ afe_m, sex == 2 ~ afe_f),     age_u1_cat = dplyr::case_when(       # NOTE: Round here will ensure that decimals are not omited in the calculation.       round(age_m_total) %in% 0:5 ~ \"0-5 months\",       round(age_m_total) %in% 6:8 ~ \"6-8 months\",       round(age_m_total) %in% 9:11 ~ \"9-11 months\"     )   ) |>   # Add the AME/AFE factors for the specific age categories   dplyr::left_join(ame_spec_factors, by = c(\"age_u1_cat\" = \"cat\")) |>   # Dietary requirements for children under 1 year old   dplyr::mutate(     ame_lac = dplyr::case_when(age_y < 2 ~ 0.19),     afe_lac = dplyr::case_when(age_y < 2 ~ 0.24)   ) |>   dplyr::rowwise() |>   # TODO: Will it not be better to have the pregnancy values added at the same time here?   dplyr::mutate(ame = sum(c(ame_base, ame_spec, ame_lac), na.rm = TRUE),                 afe = sum(c(afe_base, afe_spec, afe_lac), na.rm = TRUE)) |>   # Calculate number of individuals in the households   dplyr::group_by(HHID) |>   dplyr::summarize(     hh_persons = dplyr::n(),     hh_ame = sum(ame),     hh_afe = sum(afe)   ) |>   # Merge with the pregnancy and illness data   dplyr::left_join(pregnantPersons, by = \"HHID\") |>   dplyr::rowwise() |>   dplyr::mutate(hh_ame = sum(c(hh_ame, ame_preg), na.rm = T),                 hh_afe = sum(c(hh_afe, afe_preg), na.rm = T)) |>   dplyr::ungroup() |>   # Fix single household factors   dplyr::mutate(     hh_ame = dplyr::if_else(hh_persons == 1, 1, hh_ame),     hh_afe = dplyr::if_else(hh_persons == 1, 1, hh_afe)   ) |>   dplyr::select(HHID, hh_persons, hh_ame, hh_afe) |>   dplyr::rename(hhid = HHID)"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"enrich-consumption-data-with-afeame","dir":"","previous_headings":"","what":"Enrich Consumption Data with AFE/AME","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"use left_join function dplyr join consumption data aMFe_summaries data. left_join function join aMFe_summaries data sample_hces data matching hhid column data sets. left_join function add hh_persons, hh_ame hh_afe columns sample_hces data. hh_persons column contains number people household. hh_ame hh_afe columns contain AME AFE factors household. Now “clean” data set can use analysis.","code":"sample_hces <- sample_hces |>    dplyr::left_join(aMFe_summaries)"},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"chapter demonstrated use hcesNutR package process HCES data. package contains functions help analysis HCES data. package also contains sample data used book .e. r4hces-data/mwi-ihs5-sample-data used sample data demonstrate use functions package. package still development updated regularly.Please report bugs issues .","code":""},{"path":"https://dzvoti.github.io/hcesNutR/index.html","id":"future-work","dir":"","previous_headings":"","what":"Future work","title":"Households Consumption Expenditure Survey (HCES) Nutrition Data Analysis","text":"Add functions package Support surveys (NGA Living Standards Survey 2018-2019) Add internal data package Add documentation package","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/apply_wght_conv_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply weight conversion factors to HCES data — apply_wght_conv_fct","title":"Apply weight conversion factors to HCES data — apply_wght_conv_fct","text":"function applies weight conversion factors HCES data based conversion factors dataframe. merges HCES data conversion factors dataframe `measure_id` column, calculates weight kg food item using conversion factor consumption quantity. resulting dataframe contains original HCES data additional columns conversion factor weight kg.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/apply_wght_conv_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply weight conversion factors to HCES data — apply_wght_conv_fct","text":"","code":"apply_wght_conv_fct(   hces_df,   conv_fct_df,   factor_col = \"factor\",   measure_id_col = \"measure_id\",   wt_kg_col = \"wt_kg\",   cons_qnty_col = \"cons_quant\",   allowDuplicates = FALSE )"},{"path":"https://dzvoti.github.io/hcesNutR/reference/apply_wght_conv_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply weight conversion factors to HCES data — apply_wght_conv_fct","text":"hces_df dataframe containing HCES data. conv_fct_df dataframe containing conversion factors. factor_col name column `conv_fct_df` containing conversion factors. measure_id_col name column dataframes containing measure IDs. wt_kg_col name column store weight kg. cons_qnty_col name column `hces_df` containing consumption quantity. allowDuplicates logical value indicating whether allow duplicates measure_id column conversion factors dataframe. Default FALSE.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/apply_wght_conv_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply weight conversion factors to HCES data — apply_wght_conv_fct","text":"dataframe containing original HCES data additional columns conversion factor weight kg.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/apply_wght_conv_fct.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Apply weight conversion factors to HCES data — apply_wght_conv_fct","text":"function checks required columns present dataframes throws error . also checks duplicates measure_id column conversion factors dataframe throws error .","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/apply_wght_conv_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply weight conversion factors to HCES data — apply_wght_conv_fct","text":"","code":"if (FALSE) { # \\dontrun{ apply_wght_conv_fct(hces_df, conv_fct_df, factor_col = \"factor\", measure_id_col = \"measure_id\",  wt_kg_col = \"wt_kg\", cons_qnty_col = \"cons_quant\", allowDuplicates = FALSE) } # }"},{"path":"https://dzvoti.github.io/hcesNutR/reference/check_conv_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing conversion factors — check_conv_fct","title":"Check for missing conversion factors — check_conv_fct","text":"function checks `measure_id` column present input dataframes `hces_df` `conv_fct_df`. `measure_id` present either dataframes, function throws error. function filters rows `hces_df` `conv_fct_df` based `measure_id` column. returns dataframe `missing_conv_fct_df` contains missing `measure_id` values.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/check_conv_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing conversion factors — check_conv_fct","text":"","code":"check_conv_fct(hces_df, conv_fct_df)"},{"path":"https://dzvoti.github.io/hcesNutR/reference/check_conv_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing conversion factors — check_conv_fct","text":"hces_df dataframe containing `measure_id` column. conv_fct_df dataframe containing `measure_id` column.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/check_conv_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing conversion factors — check_conv_fct","text":"dataframe `missing_conv_fct_df` containing missing `measure_id` values.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/check_conv_fct.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check for missing conversion factors — check_conv_fct","text":"Use `View()` see missing conversion factors.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/check_conv_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing conversion factors — check_conv_fct","text":"","code":"if (FALSE) { # \\dontrun{ check_conv_fct(hces_df, conv_fct_df) } # }"},{"path":"https://dzvoti.github.io/hcesNutR/reference/check_hces_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare column names in HCES data — check_hces_names","title":"Compare column names in HCES data — check_hces_names","text":"function compares column names hces data file standard MAPS column names. print changes console.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/check_hces_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare column names in HCES data — check_hces_names","text":"","code":"check_hces_names(data, original_data_df)"},{"path":"https://dzvoti.github.io/hcesNutR/reference/check_hces_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare column names in HCES data — check_hces_names","text":"data dataframe . data file dataframe. original_data_df dataframe . original data file dataframe.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/check_hces_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare column names in HCES data — check_hces_names","text":"dataframe: data file renamed columns, converted data types table changes console.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/combined_food_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Food Names and Codes Supported by this Package — combined_food_list","title":"Food Names and Codes Supported by this Package — combined_food_list","text":"data frame containing standard non-standard food names codes surveys supported package.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/combined_food_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Food Names and Codes Supported by this Package — combined_food_list","text":"","code":"combined_food_list"},{"path":"https://dzvoti.github.io/hcesNutR/reference/combined_food_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Food Names and Codes Supported by this Package — combined_food_list","text":"object class data.frame 292 rows 6 columns.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/concatenate_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate values in multiple columns into a single column — concatenate_columns","title":"Concatenate values in multiple columns into a single column — concatenate_columns","text":"function concatenates values multiple columns data frame single column. filters blank,  NA, excluded values concatenating remaining values space . also removes parenthesis extra spaces concatenated string, unless specified otherwise.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/concatenate_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate values in multiple columns into a single column — concatenate_columns","text":"","code":"concatenate_columns(   data,   columns,   exclude_value,   new_column_name,   keep_parenthesis = TRUE )"},{"path":"https://dzvoti.github.io/hcesNutR/reference/concatenate_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate values in multiple columns into a single column — concatenate_columns","text":"data data frame containing columns concatenate columns character vector column names concatenate exclude_value character vector strings exclude concatenated values new_column_name character string name new column create. column can one existing columns used concatenate. keep_parenthesis boolean indicating whether keep parenthesis concatenated string (default TRUE)","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/concatenate_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate values in multiple columns into a single column — concatenate_columns","text":"modified data frame new column containing concatenated values","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/concatenate_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate values in multiple columns into a single column — concatenate_columns","text":"","code":"# Concatenate consumption unit columns in IHS5 data hces_data <- data.frame( food_item_code = c(101, 102, 103, 104), cons_unit_name = c(\"OTHER (SPECIFY)\", \"BASIN\", \"PIECE\", \"OTHER (SPECIFY)\"), cons_unit_oth = c(\"HEAP\", NA, \"Soy\", \"TUBE\"), cons_unit_size_name = c(\"SMALL\", \"HEAPED\", NA, \"LARGE\") )  # Concatenate food item columns in HCES data hces_data <- concatenate_columns(data = hces_data, columns = c(\"cons_unit_name\", \"cons_unit_oth\", \"cons_unit_size_name\"), exclude_value = c(\"SPECIFY\", \"OTHER\"), new_column_name=\"survey_food_item\",  keep_parenthesis = FALSE)"},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_dta_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labels for Stata data — create_dta_labels","title":"Create labels for Stata data — create_dta_labels","text":"function creates labels <dbl+lbl> columns data imported Stata data.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_dta_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labels for Stata data — create_dta_labels","text":"","code":"create_dta_labels(data)"},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_dta_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labels for Stata data — create_dta_labels","text":"data dataframe . data file dataframe.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_dta_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labels for Stata data — create_dta_labels","text":"dataframe: data file labels <dbl+lbl> columns.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_dta_labels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create labels for Stata data — create_dta_labels","text":"function uses haven package create labels values columns. function create labels values columns already exist. overwrite existing columns.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_matches_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Matches CSV — create_matches_csv","title":"Create Matches CSV — create_matches_csv","text":"function creates Shiny application allows users match non-standard food items standard ones. matches based closest string match. user can manually adjust matches UI. matched data can added R environment downloaded CSV file.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_matches_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Matches CSV — create_matches_csv","text":"","code":"create_matches_csv()"},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_matches_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Matches CSV — create_matches_csv","text":"Shiny application.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_matches_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Matches CSV — create_matches_csv","text":"","code":"if (FALSE) { # \\dontrun{ create_matches_csv() } # }"},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_measure_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a measure ID column based on selected columns — create_measure_id","title":"Create a measure ID column based on selected columns — create_measure_id","text":"function creates measure ID column data frame based selected columns. measure ID string concatenates values selected columns hyphens. measure ID can optionally include country survey strings.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_measure_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a measure ID column based on selected columns — create_measure_id","text":"","code":"create_measure_id(data, country, survey, cols, include_ISOs = FALSE)"},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_measure_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a measure ID column based on selected columns — create_measure_id","text":"data data frame modify. country character string specifying country data. survey character string specifying survey data. cols character vector specifying names columns include measure ID. include_ISOs logical value indicating whether include country survey strings measure ID.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_measure_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a measure ID column based on selected columns — create_measure_id","text":"modified data frame measure ID column added.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/create_measure_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a measure ID column based on selected columns — create_measure_id","text":"","code":"data <- data.frame(unit_name = c(\"kg\", \"g\", \"lb\", \"oz\"), unit_code = c(\"KGM\", \"GRM\", \"LBR\", \"ONZ\"),  region = c(\"A\", \"B\", \"C\", \"D\")) create_measure_id(data, \"USA\", \"NHANES\", c(\"unit_name\", \"unit_code\", \"region\"), TRUE) #>   unit_name unit_code region          measure_id #> 1        kg       KGM      A USA-NHANES-kg-KGM-A #> 2         g       GRM      B  USA-NHANES-g-GRM-B #> 3        lb       LBR      C USA-NHANES-lb-LBR-C #> 4        oz       ONZ      D USA-NHANES-oz-ONZ-D"},{"path":"https://dzvoti.github.io/hcesNutR/reference/food_list_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Food Item Names and Codes Supported by this Package — food_list_df","title":"Food Item Names and Codes Supported by this Package — food_list_df","text":"data frame containing standard non-standard food item names codes surveys supported package.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/food_list_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Food Item Names and Codes Supported by this Package — food_list_df","text":"","code":"food_list_df"},{"path":"https://dzvoti.github.io/hcesNutR/reference/food_list_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Food Item Names and Codes Supported by this Package — food_list_df","text":"object class spec_tbl_df (inherits tbl_df, tbl, data.frame) 351 rows 8 columns.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/get_hces_mappings.html","id":null,"dir":"Reference","previous_headings":"","what":"Get column mapping for a given country and survey — get_hces_mappings","title":"Get column mapping for a given country and survey — get_hces_mappings","text":"function returns column mapping given country survey","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/get_hces_mappings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get column mapping for a given country and survey — get_hces_mappings","text":"","code":"get_hces_mappings(country_name, survey_name)"},{"path":"https://dzvoti.github.io/hcesNutR/reference/get_hces_mappings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get column mapping for a given country and survey — get_hces_mappings","text":"country_name character country name ISO3 format. survey_name character survey name short form.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/get_hces_mappings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get column mapping for a given country and survey — get_hces_mappings","text":"dataframe: column mapping given country survey.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/hh_mod_a_filt_vMAPS.html","id":null,"dir":"Reference","previous_headings":"","what":"Module A: Household Identification (household level data) — hh_mod_a_filt_vMAPS","title":"Module A: Household Identification (household level data) — hh_mod_a_filt_vMAPS","text":"Randomly Generated Samaple Data Resembling Data collected Household Questionnaire, Module : Household Identification (household level data) - module household identifiers, sample weights, information household location, date interview, supervisor enumerator codes. Additionally, module contains filters subsequent modules.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/hh_mod_a_filt_vMAPS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Module A: Household Identification (household level data) — hh_mod_a_filt_vMAPS","text":"","code":"hh_mod_a_filt_vMAPS"},{"path":"https://dzvoti.github.io/hcesNutR/reference/hh_mod_a_filt_vMAPS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Module A: Household Identification (household level data) — hh_mod_a_filt_vMAPS","text":"data frame","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_names_v1.html","id":null,"dir":"Reference","previous_headings":"","what":"Match food names in a dataset to an internal standard food list — match_food_names_v1","title":"Match food names in a dataset to an internal standard food list — match_food_names_v1","text":"function matches food names dataset standard food list based closest string distance match. appends food item code, standard food name, source match confidence level dataset.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_names_v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match food names in a dataset to an internal standard food list — match_food_names_v1","text":"","code":"match_food_names_v1(   data,   country,   survey,   food_name_col,   match_confidence = 90 )"},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_names_v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match food names in a dataset to an internal standard food list — match_food_names_v1","text":"data data frame containing food names matched. country character string specifying country food list generated. survey character string specifying survey food list generated. food_name_col character string specifying name column data contains food names matched. match_confidence numeric value specifying minimum match confidence level required match considered valid. Defaults 90.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_names_v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match food names in a dataset to an internal standard food list — match_food_names_v1","text":"data frame following columns: food_item_code character string containing standard food item code matched food item. standard_original_food_name character string containing standard food name matched food item. food_match_source character string containing source matched food item. food_match_confidence numeric value containing match confidence level matched food item.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_names_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"Match food names to a standard list of food items — match_food_names_v2","title":"Match food names to a standard list of food items — match_food_names_v2","text":"function matches food names standard list food items returns data frame matched food names codes. function can use internal food list user-provided food list perform matching. function also provides diagnostics number rows matches found list foods matches found.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_names_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match food names to a standard list of food items — match_food_names_v2","text":"","code":"match_food_names_v2(   data,   country,   survey,   food_name_col,   food_code_col,   matches_csv = NULL,   overwrite = FALSE )"},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_names_v2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match food names to a standard list of food items — match_food_names_v2","text":"data data frame containing food names codes matched. country character string specifying country food items matched. survey character string specifying survey food items matched. food_name_col character string specifying name column data containing food names. food_code_col character string specifying name column data containing food codes. matches_csv character string specifying path user-provided CSV file containing food list used matching. NULL, function uses internal food list. overwrite logical value indicating whether overwrite original food name code columns data matched food names codes. TRUE, original columns overwritten. FALSE, new columns created matched food names codes.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_names_v2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match food names to a standard list of food items — match_food_names_v2","text":"data frame matched food names codes.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_names_v2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match food names to a standard list of food items — match_food_names_v2","text":"","code":"if (FALSE) { # \\dontrun{ # Load the MWI data data(\"mwi_data\", package = \"hcesNutR\")  # Match the food names to the standard list of food items matched_data <- match_food_names_v2(data = mwi_data,                                      country = \"MWI\",                                      survey = \"IHS5\",                                      food_name_col = \"food_item_name\",                                      food_code_col = \"food_item_code\") } # }"},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_units_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"Match food units to a standard list of units — match_food_units_v2","title":"Match food units to a standard list of units — match_food_units_v2","text":"function matches food units data frame standard list units. function creates unit key column data frame uses match food units standard list units. function can use internal list units user-provided list units. function can overwrite original columns matched columns create new columns matched units. function returns data frame matched units column indicating source match.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_units_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match food units to a standard list of units — match_food_units_v2","text":"","code":"match_food_units_v2(   data,   country,   survey,   unit_name_col,   unit_code_col,   matches_csv = NULL,   overwrite = FALSE )"},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_units_v2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match food units to a standard list of units — match_food_units_v2","text":"data data frame containing food units matched. country character string indicating country food units matched. survey character string indicating survey food units matched. unit_name_col character string indicating name column containing food unit names data frame. unit_code_col character string indicating name column containing food unit codes data frame. matches_csv character string indicating path CSV file containing standard list units. NULL, function uses internal list units. overwrite logical value indicating whether overwrite original columns matched columns (TRUE) create new columns matched units (FALSE).","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_units_v2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match food units to a standard list of units — match_food_units_v2","text":"data frame matched units column indicating source match.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_food_units_v2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match food units to a standard list of units — match_food_units_v2","text":"","code":"# Match food units in a data frame to a standard list of units data <- data.frame(food = c(\"apple\", \"banana\", \"orange\"), unit = c(\"kg\", \"lb\", \"g\")) match_food_units_v2(data, \"MWI\", \"IHS5\", \"food\", \"unit\") #>  #>  There are 3 out of 3 rows with unmatched units, which represents 100% of the data. The missing values are shown in the pop up view:  #>  #>     food unit matched_food matched_unit unit_source #> 1  apple   kg         <NA>         <NA>    NO-MATCH #> 2 banana   lb         <NA>         <NA>    NO-MATCH #> 3 orange    g         <NA>         <NA>    NO-MATCH"},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_unit_names_v1.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign unit codes to a data frame based on a unit codes CSV file — match_unit_names_v1","title":"Assign unit codes to a data frame based on a unit codes CSV file — match_unit_names_v1","text":"function assigns unit codes data frame based unit codes CSV file. CSV file must contain column unit names column corresponding unit codes. function removes special characters unit names matching data frame.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_unit_names_v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign unit codes to a data frame based on a unit codes CSV file — match_unit_names_v1","text":"","code":"match_unit_names_v1(   data,   country,   survey,   unit_code_col,   unit_name_col,   unit_codes_csv = NULL )"},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_unit_names_v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign unit codes to a data frame based on a unit codes CSV file — match_unit_names_v1","text":"data data frame modify. country character string specifying country data. survey character string specifying survey data. unit_code_col character string specifying name column data frame store unit codes. unit_name_col character string specifying name column data frame match unit names. unit_codes_csv character string specifying file path unit codes CSV file. NULL, internal data hcesNutR::unit_codes used.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/match_unit_names_v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign unit codes to a data frame based on a unit codes CSV file — match_unit_names_v1","text":"modified data frame unit codes assigned.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/non_standard_food_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Non Standard Food Names and Codes — non_standard_food_list","title":"Non Standard Food Names and Codes — non_standard_food_list","text":"data frame containing non-standard food names codes surveys supported package.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/non_standard_food_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non Standard Food Names and Codes — non_standard_food_list","text":"","code":"non_standard_food_list"},{"path":"https://dzvoti.github.io/hcesNutR/reference/non_standard_food_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Non Standard Food Names and Codes — non_standard_food_list","text":"object class data.frame 164 rows 5 columns.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/remove_spec_char_v1.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove special characters from a column in a dataframe — remove_spec_char_v1","title":"Remove special characters from a column in a dataframe — remove_spec_char_v1","text":"function removes special characters specified column dataframe. also adds period '' whole word already followed period.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/remove_spec_char_v1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove special characters from a column in a dataframe — remove_spec_char_v1","text":"","code":"remove_spec_char_v1(data, column, keep_parenthesis = TRUE)"},{"path":"https://dzvoti.github.io/hcesNutR/reference/remove_spec_char_v1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove special characters from a column in a dataframe — remove_spec_char_v1","text":"data dataframe. dataframe modify. column character. name column modify. keep_parenthesis logical. TRUE, parenthesis kept column. FALSE, parenthesis removed. Default TRUE.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/remove_spec_char_v1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove special characters from a column in a dataframe — remove_spec_char_v1","text":"dataframe. modified dataframe.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/remove_spec_char_v1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove special characters from a column in a dataframe — remove_spec_char_v1","text":"","code":"data <- data.frame(x = c(\"NO\", \"YES (maybe)\", \"NO (definitely)\")) remove_spec_char_v1(data, \"x\", FALSE) #>                 x #> 1             NO. #> 2      YES -MAYBE #> 3 NO. -DEFINITELY"},{"path":"https://dzvoti.github.io/hcesNutR/reference/remove_unconsumed.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove unconsumed food item records — remove_unconsumed","title":"Remove unconsumed food item records — remove_unconsumed","text":"function removes unconsumed food item records data file.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/remove_unconsumed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove unconsumed food item records — remove_unconsumed","text":"","code":"remove_unconsumed(data, consCol = \"consYN\", consVal = \"YES\")"},{"path":"https://dzvoti.github.io/hcesNutR/reference/remove_unconsumed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove unconsumed food item records — remove_unconsumed","text":"data dataframe . data file dataframe. consCol character . name column indicates whether food item consumed .","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/remove_unconsumed.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Remove unconsumed food item records — remove_unconsumed","text":"read_in_data() function used first import format required data.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/rename_hces.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename data columns in HCES data — rename_hces","title":"Rename data columns in HCES data — rename_hces","text":"function renames columns hces data file standard MAPS column names.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/rename_hces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename data columns in HCES data — rename_hces","text":"","code":"rename_hces(data, country_name, survey_name)"},{"path":"https://dzvoti.github.io/hcesNutR/reference/rename_hces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename data columns in HCES data — rename_hces","text":"data dataframe . data file dataframe. column_mapping dataframe . column mapping file dataframe.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/rename_hces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename data columns in HCES data — rename_hces","text":"dataframe: data file renamed columns.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/rename_hces.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rename data columns in HCES data — rename_hces","text":"read_in_data() function used first import format required data.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/replace_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace values in a column of a dataframe — replace_values","title":"Replace values in a column of a dataframe — replace_values","text":"function replaces values column dataframe new value.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/replace_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace values in a column of a dataframe — replace_values","text":"","code":"replace_values(data, targetColumn, secondaryColumn, string2search)"},{"path":"https://dzvoti.github.io/hcesNutR/reference/replace_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace values in a column of a dataframe — replace_values","text":"data dataframe modify. targetColumn name column modify. secondaryColumn name column extract values replace targetColumn. string2search value search. can whole string part .","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/replace_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace values in a column of a dataframe — replace_values","text":"modified dataframe.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/replace_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace values in a column of a dataframe — replace_values","text":"","code":"data <- data.frame(x = c(\"a\", \"b\", \"c\"), y = c(\"d\", \"e\", \"f\")) replace_values(data, \"x\", \"y\", \"b\") #>   x y #> 1 a d #> 2 e e #> 3 c f"},{"path":"https://dzvoti.github.io/hcesNutR/reference/rm_special_chars_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove special characters and spaces from a string vector and capitalize the result — rm_special_chars_v2","title":"Remove special characters and spaces from a string vector and capitalize the result — rm_special_chars_v2","text":"function takes vector strings input, removes special characters spaces string, returns new vector strings string collapsed one string capitalized.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/rm_special_chars_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove special characters and spaces from a string vector and capitalize the result — rm_special_chars_v2","text":"","code":"rm_special_chars_v2(str_vec)"},{"path":"https://dzvoti.github.io/hcesNutR/reference/rm_special_chars_v2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove special characters and spaces from a string vector and capitalize the result — rm_special_chars_v2","text":"str_vec vector strings processed","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/rm_special_chars_v2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove special characters and spaces from a string vector and capitalize the result — rm_special_chars_v2","text":"vector strings string collapsed one string capitalized","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/rm_special_chars_v2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove special characters and spaces from a string vector and capitalize the result — rm_special_chars_v2","text":"","code":"rm_special_chars_v2(c(\"PACKET (LARGE)\", \"BAG (SMALL)\", \"BOX (MEDIUM)\")) #>   PACKETLARGE      BAGSMALL     BOXMEDIUM  #> \"PACKETLARGE\"    \"BAGSMALL\"   \"BOXMEDIUM\""},{"path":"https://dzvoti.github.io/hcesNutR/reference/split_dta.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a labelled variable into two new variables — split_dta","title":"Split a labelled variable into two new variables — split_dta","text":"function splits labelled variable two new variables: one containing numeric values one containing character labels. new variables added input data frame original variable dropped default.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/split_dta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a labelled variable into two new variables — split_dta","text":"","code":"split_dta(data, split_var, val_to, lab_to, drop_split_var = TRUE)"},{"path":"https://dzvoti.github.io/hcesNutR/reference/split_dta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a labelled variable into two new variables — split_dta","text":"data data frame containing input variable. split_var character string specifying name labelled input variable split. val_to character string specifying name new variable contain numeric values. lab_to character string specifying name new variable contain character labels. drop_split_var logical value indicating whether drop original variable (default TRUE).","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/split_dta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a labelled variable into two new variables — split_dta","text":"data frame new variables added original variable dropped (specified).","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/split_dta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a labelled variable into two new variables — split_dta","text":"","code":"library(haven) df <- data.frame(   HHID = c(rep(\"hh01\",5),rep(\"hh02\",5)),   food_item = (rep(101:105,2)),   consYN = sample(1:2,10,replace = TRUE) )   # Add value labels df$food_item <- labelled(df$food_item, c(\"maize\" = 101, \"wheat\" = 102,  \"rice\" = 103, \"meat\" = 104, \"fish\" = 105)) df$consYN <- labelled(df$consYN, c(\"Yes\" = 1, \"No\" = 2))  # Print data frame df #>    HHID food_item consYN #> 1  hh01       101      1 #> 2  hh01       102      1 #> 3  hh01       103      2 #> 4  hh01       104      1 #> 5  hh01       105      1 #> 6  hh02       101      2 #> 7  hh02       102      1 #> 8  hh02       103      1 #> 9  hh02       104      1 #> 10 hh02       105      2  # Split the food_item column into two new columns split_dta(df, \"food_item\", \"food_item_id\", \"food_item_lab\") #> Variable food_item has been split into food_item_id and food_item_lab. #> Variable food_item has been dropped. #>    HHID consYN food_item_id food_item_lab #> 1  hh01      1          101         maize #> 2  hh01      1          102         wheat #> 3  hh01      2          103          rice #> 4  hh01      1          104          meat #> 5  hh01      1          105          fish #> 6  hh02      2          101         maize #> 7  hh02      1          102         wheat #> 8  hh02      1          103          rice #> 9  hh02      1          104          meat #> 10 hh02      2          105          fish"},{"path":"https://dzvoti.github.io/hcesNutR/reference/standard_food_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard Food Names and Codes — standard_food_list","title":"Standard Food Names and Codes — standard_food_list","text":"data frame containing food names codes surveys supported package.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/standard_food_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard Food Names and Codes — standard_food_list","text":"","code":"standard_food_list"},{"path":"https://dzvoti.github.io/hcesNutR/reference/standard_food_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Standard Food Names and Codes — standard_food_list","text":"object class data.frame 142 rows 4 columns.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/standard_name_mappings_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard HCES Variable Name Mappings — standard_name_mappings_pairs","title":"Standard HCES Variable Name Mappings — standard_name_mappings_pairs","text":"data frame containing standard variable name mapping pairs IHS5 survey.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/standard_name_mappings_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard HCES Variable Name Mappings — standard_name_mappings_pairs","text":"","code":"standard_name_mappings_pairs"},{"path":"https://dzvoti.github.io/hcesNutR/reference/standard_name_mappings_pairs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Standard HCES Variable Name Mappings — standard_name_mappings_pairs","text":"object class data.frame 32 rows 5 columns.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/unit_names_n_codes_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Food Unit Names and Unit Codes Supported by this Package — unit_names_n_codes_df","title":"Food Unit Names and Unit Codes Supported by this Package — unit_names_n_codes_df","text":"data frame containing standard non-standard food unit names unit codes surveys supported package. data frame containing standard non-standard food unit names unit codes surveys supported package.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/unit_names_n_codes_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Food Unit Names and Unit Codes Supported by this Package — unit_names_n_codes_df","text":"","code":"unit_names_n_codes_df  unit_names_n_codes_df"},{"path":"https://dzvoti.github.io/hcesNutR/reference/unit_names_n_codes_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Food Unit Names and Unit Codes Supported by this Package — unit_names_n_codes_df","text":"object class tbl_df (inherits tbl, data.frame) 208 rows 6 columns. data frame 3 columns 4 rows country Country name survey Survey name unit_name Name food unit unit_code Code food unit","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/unit_names_n_codes_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Food Unit Names and Unit Codes Supported by this Package — unit_names_n_codes_df","text":"","code":"unit_names_n_codes_df #> # A tibble: 208 × 6 #>    country survey unit_name           unit_code entries_count priority #>    <chr>   <chr>  <chr>               <chr>             <dbl>    <dbl> #>  1 MWI     IHS5   100 GRAM            99A                  42        3 #>  2 MWI     IHS5   1000G PACKET        23                    1        4 #>  3 MWI     IHS5   10G PACKET          23                    1        4 #>  4 MWI     IHS5   10KG PAIL           23                    1        4 #>  5 MWI     IHS5   10L BUCKET          81                    4        2 #>  6 MWI     IHS5   125G PACKET         99C                  10        3 #>  7 MWI     IHS5   135G PACKET         23                    1        4 #>  8 MWI     IHS5   149G TIN            23                    2        4 #>  9 MWI     IHS5   1LITRE BOTTLE SUPER 23                    1        4 #> 10 MWI     IHS5   20 LITRE PAIL       4E                    2        2 #> # ℹ 198 more rows"},{"path":"https://dzvoti.github.io/hcesNutR/reference/which_labelled.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify labelled variables in a data frame — which_labelled","title":"Identify labelled variables in a data frame — which_labelled","text":"function takes data frame input returns character vector names variables data frame labelled using `haven` package.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/which_labelled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify labelled variables in a data frame — which_labelled","text":"","code":"which_labelled(data)"},{"path":"https://dzvoti.github.io/hcesNutR/reference/which_labelled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify labelled variables in a data frame — which_labelled","text":"data data frame check labelled variables.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/which_labelled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify labelled variables in a data frame — which_labelled","text":"character vector names labelled variables input data frame.","code":""},{"path":"https://dzvoti.github.io/hcesNutR/reference/which_labelled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify labelled variables in a data frame — which_labelled","text":"","code":"library(haven) df <- data.frame(   HHID = c(rep(\"hh01\",5),rep(\"hh02\",5)),   food_item = (rep(101:105,2)),   consYN = sample(1:2,10,replace = TRUE) )   # Add value labels df$food_item <- labelled(df$food_item, c(\"maize\" = 101, \"wheat\" = 102,  \"rice\" = 103, \"meat\" = 104, \"fish\" = 105)) df$consYN <- labelled(df$consYN, c(\"Yes\" = 1, \"No\" = 2))  # Print data frame df #>    HHID food_item consYN #> 1  hh01       101      2 #> 2  hh01       102      1 #> 3  hh01       103      1 #> 4  hh01       104      1 #> 5  hh01       105      1 #> 6  hh02       101      2 #> 7  hh02       102      1 #> 8  hh02       103      1 #> 9  hh02       104      2 #> 10 hh02       105      2  # Check for labelled variables which_labelled(df) #> The following variables are labelled: Use `hcesNutR::split_dta()` to split the data into two separate columns. #> [1] \"food_item\" \"consYN\""}]
